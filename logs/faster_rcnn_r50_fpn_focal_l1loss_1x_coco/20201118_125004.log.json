{"env_info": "sys.platform: linux\nPython: 3.7.8 | packaged by conda-forge | (default, Jul 31 2020, 02:25:08) [GCC 7.5.0]\nCUDA available: True\nGPU 0: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda-11.0\nNVCC: Build cuda_11.0_bu.TC445_37.28845127_0\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1\nOpenCV: 4.4.0\nMMCV: 1.2.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.6.0+f382ec8", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=1,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/train/coco.json',\n        img_prefix='data/visdrone/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/val/coco.json',\n        img_prefix='data/visdrone/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/test/coco.json',\n        img_prefix='data/visdrone/test/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nclasses = ('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n           'tricycle', 'awning-tricycle', 'bus', 'motor')\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_focal_l1loss_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_focal_l1loss_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 3528, "data_time": 0.04548, "loss_rpn_cls": 0.67912, "loss_rpn_bbox": 0.27145, "loss_cls": 1.14978, "acc": 82.98047, "loss_bbox": 0.04943, "loss": 2.14978, "time": 0.24414}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 3650, "data_time": 0.00384, "loss_rpn_cls": 0.56938, "loss_rpn_bbox": 0.26999, "loss_cls": 0.70529, "acc": 87.22266, "loss_bbox": 0.18803, "loss": 1.73269, "time": 0.19547}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 3650, "data_time": 0.00389, "loss_rpn_cls": 0.41866, "loss_rpn_bbox": 0.27381, "loss_cls": 0.76214, "acc": 84.32812, "loss_bbox": 0.33303, "loss": 1.78764, "time": 0.19387}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 3650, "data_time": 0.00381, "loss_rpn_cls": 0.31992, "loss_rpn_bbox": 0.25132, "loss_cls": 0.78724, "acc": 82.19922, "loss_bbox": 0.42893, "loss": 1.78741, "time": 0.20085}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4136, "data_time": 0.00383, "loss_rpn_cls": 0.30071, "loss_rpn_bbox": 0.21583, "loss_cls": 0.77595, "acc": 80.84766, "loss_bbox": 0.48422, "loss": 1.7767, "time": 0.19619}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4136, "data_time": 0.00374, "loss_rpn_cls": 0.28295, "loss_rpn_bbox": 0.24872, "loss_cls": 0.73931, "acc": 81.23828, "loss_bbox": 0.4934, "loss": 1.76437, "time": 0.20169}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4136, "data_time": 0.00363, "loss_rpn_cls": 0.22288, "loss_rpn_bbox": 0.22889, "loss_cls": 0.73104, "acc": 80.56641, "loss_bbox": 0.54087, "loss": 1.72368, "time": 0.19743}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 4136, "data_time": 0.00368, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 78.57318, "loss_bbox": NaN, "loss": NaN, "time": 0.20046}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 4136, "data_time": 0.00365, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.99981, "loss_bbox": NaN, "loss": NaN, "time": 0.19514}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 4136, "data_time": 0.00409, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 16.11771, "loss_bbox": NaN, "loss": NaN, "time": 0.19322}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 4136, "data_time": 0.00358, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.81226, "loss_bbox": NaN, "loss": NaN, "time": 0.19489}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 4136, "data_time": 0.00382, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 19.71928, "loss_bbox": NaN, "loss": NaN, "time": 0.19483}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 4136, "data_time": 0.00366, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 18.69773, "loss_bbox": NaN, "loss": NaN, "time": 0.19647}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 4136, "data_time": 0.00373, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.54616, "loss_bbox": NaN, "loss": NaN, "time": 0.19869}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 4136, "data_time": 0.00376, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.06232, "loss_bbox": NaN, "loss": NaN, "time": 0.19625}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 4136, "data_time": 0.0036, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.07562, "loss_bbox": NaN, "loss": NaN, "time": 0.19596}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 4136, "data_time": 0.00355, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.42356, "loss_bbox": NaN, "loss": NaN, "time": 0.1974}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 4791, "data_time": 0.00375, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.7607, "loss_bbox": NaN, "loss": NaN, "time": 0.2016}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 4791, "data_time": 0.00379, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.15096, "loss_bbox": NaN, "loss": NaN, "time": 0.19713}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 4791, "data_time": 0.0037, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.02596, "loss_bbox": NaN, "loss": NaN, "time": 0.19936}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 4791, "data_time": 0.00372, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.11834, "loss_bbox": NaN, "loss": NaN, "time": 0.19858}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 4791, "data_time": 0.00374, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 18.36535, "loss_bbox": NaN, "loss": NaN, "time": 0.20272}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 4791, "data_time": 0.00393, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.55854, "loss_bbox": NaN, "loss": NaN, "time": 0.19891}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 5527, "data_time": 0.00399, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.15744, "loss_bbox": NaN, "loss": NaN, "time": 0.20076}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 5527, "data_time": 0.00381, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.78682, "loss_bbox": NaN, "loss": NaN, "time": 0.20122}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 5527, "data_time": 0.00376, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 19.40213, "loss_bbox": NaN, "loss": NaN, "time": 0.19949}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 5527, "data_time": 0.00368, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 25.19369, "loss_bbox": NaN, "loss": NaN, "time": 0.20202}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 5527, "data_time": 0.00384, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.46061, "loss_bbox": NaN, "loss": NaN, "time": 0.20165}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 5527, "data_time": 0.00374, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 22.44903, "loss_bbox": NaN, "loss": NaN, "time": 0.20113}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 5527, "data_time": 0.00362, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 19.85676, "loss_bbox": NaN, "loss": NaN, "time": 0.19788}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 5800, "data_time": 0.00407, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.31389, "loss_bbox": NaN, "loss": NaN, "time": 0.20274}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 5800, "data_time": 0.00367, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.74417, "loss_bbox": NaN, "loss": NaN, "time": 0.20201}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 5800, "data_time": 0.00386, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 18.82585, "loss_bbox": NaN, "loss": NaN, "time": 0.20239}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 5800, "data_time": 0.00392, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 22.70059, "loss_bbox": NaN, "loss": NaN, "time": 0.20527}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 5800, "data_time": 0.00366, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.14702, "loss_bbox": NaN, "loss": NaN, "time": 0.2041}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 5800, "data_time": 0.00375, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.1146, "loss_bbox": NaN, "loss": NaN, "time": 0.20473}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 5800, "data_time": 0.00365, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 15.98407, "loss_bbox": NaN, "loss": NaN, "time": 0.19991}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 5800, "data_time": 0.00364, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 27.79164, "loss_bbox": NaN, "loss": NaN, "time": 0.20088}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 5800, "data_time": 0.00365, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 26.30682, "loss_bbox": NaN, "loss": NaN, "time": 0.20171}
