{"env_info": "sys.platform: linux\nPython: 3.7.8 | packaged by conda-forge | (default, Jul 31 2020, 02:25:08) [GCC 7.5.0]\nCUDA available: True\nGPU 0: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda-11.0\nNVCC: Build cuda_11.0_bu.TC445_37.28845127_0\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1\nOpenCV: 4.4.0\nMMCV: 1.2.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.6.0+f382ec8", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/train/coco.json',\n        img_prefix='data/visdrone/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/val/coco.json',\n        img_prefix='data/visdrone/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/test/coco.json',\n        img_prefix='data/visdrone/test/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nclasses = ('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n           'tricycle', 'awning-tricycle', 'bus', 'motor')\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_focal_l1loss_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_focal_l1loss_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4461, "data_time": 0.04789, "loss_rpn_cls": 0.68268, "loss_rpn_bbox": 0.24729, "loss_cls": 1.18037, "acc": 82.18359, "loss_bbox": 0.07608, "loss": 2.18642, "time": 0.42307}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4914, "data_time": 0.0052, "loss_rpn_cls": 0.5338, "loss_rpn_bbox": 0.25059, "loss_cls": 0.70647, "acc": 87.34766, "loss_bbox": 0.17285, "loss": 1.66371, "time": 0.37865}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 4914, "data_time": 0.00543, "loss_rpn_cls": 0.32785, "loss_rpn_bbox": 0.25248, "loss_cls": 0.69003, "acc": 83.81055, "loss_bbox": 0.3888, "loss": 1.65917, "time": 0.38396}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 4914, "data_time": 0.00506, "loss_rpn_cls": 0.28697, "loss_rpn_bbox": 0.24022, "loss_cls": 0.7465, "acc": 80.27539, "loss_bbox": 0.5784, "loss": 1.85209, "time": 0.38651}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 4914, "data_time": 0.00551, "loss_rpn_cls": 0.23985, "loss_rpn_bbox": 0.22283, "loss_cls": 0.74763, "acc": 79.13867, "loss_bbox": 0.59906, "loss": 1.80937, "time": 0.38578}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 4914, "data_time": 0.00543, "loss_rpn_cls": 0.21572, "loss_rpn_bbox": 0.21473, "loss_cls": 0.71619, "acc": 79.34375, "loss_bbox": 0.58921, "loss": 1.73586, "time": 0.39428}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 4914, "data_time": 0.0056, "loss_rpn_cls": 0.16465, "loss_rpn_bbox": 0.20204, "loss_cls": 0.68812, "acc": 79.91211, "loss_bbox": 0.6055, "loss": 1.66031, "time": 0.38773}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 5951, "data_time": 0.00562, "loss_rpn_cls": 0.19026, "loss_rpn_bbox": 0.21172, "loss_cls": 0.6599, "acc": 80.25977, "loss_bbox": 0.59022, "loss": 1.6521, "time": 0.39022}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 5951, "data_time": 0.00533, "loss_rpn_cls": 0.18536, "loss_rpn_bbox": 0.19027, "loss_cls": 0.64909, "acc": 80.1744, "loss_bbox": 0.55389, "loss": 1.57861, "time": 0.38822}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 5951, "data_time": 0.00561, "loss_rpn_cls": 0.22211, "loss_rpn_bbox": 0.19903, "loss_cls": 0.67696, "acc": 80.22852, "loss_bbox": 0.55789, "loss": 1.65599, "time": 0.38638}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 5951, "data_time": 0.00593, "loss_rpn_cls": 0.21927, "loss_rpn_bbox": 0.19989, "loss_cls": 0.7605, "acc": 80.24219, "loss_bbox": 0.55968, "loss": 1.73934, "time": 0.39487}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 5951, "data_time": 0.00555, "loss_rpn_cls": 0.16772, "loss_rpn_bbox": 0.19136, "loss_cls": 0.66689, "acc": 80.33008, "loss_bbox": 0.58105, "loss": 1.60701, "time": 0.39502}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 5951, "data_time": 0.00524, "loss_rpn_cls": 0.16234, "loss_rpn_bbox": 0.18219, "loss_cls": 0.65302, "acc": 81.03103, "loss_bbox": 0.54995, "loss": 1.5475, "time": 0.39049}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 5951, "data_time": 0.00495, "loss_rpn_cls": 0.1555, "loss_rpn_bbox": 0.19928, "loss_cls": 0.69721, "acc": 79.73242, "loss_bbox": 0.56548, "loss": 1.61747, "time": 0.38852}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 5951, "data_time": 0.0054, "loss_rpn_cls": 0.16896, "loss_rpn_bbox": 0.19673, "loss_cls": 0.60504, "acc": 81.76172, "loss_bbox": 0.53454, "loss": 1.50527, "time": 0.38828}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 5951, "data_time": 0.00521, "loss_rpn_cls": 0.17567, "loss_rpn_bbox": 0.18057, "loss_cls": 0.63206, "acc": 81.49414, "loss_bbox": 0.52258, "loss": 1.51089, "time": 0.39178}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 5951, "data_time": 0.00591, "loss_rpn_cls": 0.14476, "loss_rpn_bbox": 0.20552, "loss_cls": 0.62914, "acc": 80.94531, "loss_bbox": 0.54927, "loss": 1.5287, "time": 0.38414}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 5951, "data_time": 0.00613, "loss_rpn_cls": 0.18529, "loss_rpn_bbox": 0.18236, "loss_cls": 0.62652, "acc": 81.5293, "loss_bbox": 0.51668, "loss": 1.51085, "time": 0.39259}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 5951, "data_time": 0.00546, "loss_rpn_cls": 0.17276, "loss_rpn_bbox": 0.18591, "loss_cls": 0.63022, "acc": 81.73047, "loss_bbox": 0.53017, "loss": 1.51906, "time": 0.38916}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 5951, "data_time": 0.00539, "loss_rpn_cls": 0.13579, "loss_rpn_bbox": 0.17609, "loss_cls": 0.59469, "acc": 82.21875, "loss_bbox": 0.52181, "loss": 1.42838, "time": 0.38444}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 5951, "data_time": 0.0052, "loss_rpn_cls": 0.12655, "loss_rpn_bbox": 0.1694, "loss_cls": 0.5992, "acc": 82.00781, "loss_bbox": 0.52101, "loss": 1.41617, "time": 0.38249}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 7107, "data_time": 0.0057, "loss_rpn_cls": 0.15943, "loss_rpn_bbox": 0.18271, "loss_cls": 0.60554, "acc": 82.16016, "loss_bbox": 0.50341, "loss": 1.4511, "time": 0.39051}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 7107, "data_time": 0.00545, "loss_rpn_cls": 0.13559, "loss_rpn_bbox": 0.16324, "loss_cls": 0.57212, "acc": 83.07227, "loss_bbox": 0.49793, "loss": 1.36887, "time": 0.38621}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.02, "memory": 7460, "data_time": 0.00557, "loss_rpn_cls": 0.14072, "loss_rpn_bbox": 0.1627, "loss_cls": 0.5956, "acc": 82.37109, "loss_bbox": 0.50305, "loss": 1.40207, "time": 0.39188}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.02, "memory": 7460, "data_time": 0.00543, "loss_rpn_cls": 0.1317, "loss_rpn_bbox": 0.17187, "loss_cls": 0.57715, "acc": 82.60938, "loss_bbox": 0.51323, "loss": 1.39395, "time": 0.39075}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.02, "memory": 7460, "data_time": 0.00605, "loss_rpn_cls": 0.13797, "loss_rpn_bbox": 0.17812, "loss_cls": 0.56617, "acc": 83.07031, "loss_bbox": 0.49591, "loss": 1.37817, "time": 0.39132}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.02, "memory": 7460, "data_time": 0.00623, "loss_rpn_cls": 0.1442, "loss_rpn_bbox": 0.16708, "loss_cls": 0.60905, "acc": 82.13477, "loss_bbox": 0.49078, "loss": 1.41111, "time": 0.39286}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.02, "memory": 7460, "data_time": 0.00598, "loss_rpn_cls": 0.12936, "loss_rpn_bbox": 0.17133, "loss_cls": 0.54041, "acc": 83.41801, "loss_bbox": 0.47074, "loss": 1.31184, "time": 0.39186}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.02, "memory": 7460, "data_time": 0.00541, "loss_rpn_cls": 0.12844, "loss_rpn_bbox": 0.16243, "loss_cls": 0.5487, "acc": 83.82227, "loss_bbox": 0.47234, "loss": 1.31191, "time": 0.38912}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.02, "memory": 7460, "data_time": 0.00522, "loss_rpn_cls": 0.1496, "loss_rpn_bbox": 0.17188, "loss_cls": 0.57476, "acc": 83.01367, "loss_bbox": 0.48402, "loss": 1.38026, "time": 0.38626}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.02, "memory": 7460, "data_time": 0.00544, "loss_rpn_cls": 0.12269, "loss_rpn_bbox": 0.18172, "loss_cls": 0.58922, "acc": 82.10352, "loss_bbox": 0.51223, "loss": 1.40587, "time": 0.38738}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.02, "memory": 7460, "data_time": 0.00529, "loss_rpn_cls": 0.13182, "loss_rpn_bbox": 0.17019, "loss_cls": 0.55873, "acc": 83.41992, "loss_bbox": 0.49322, "loss": 1.35396, "time": 0.38883}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.02, "memory": 7460, "data_time": 0.0056, "loss_rpn_cls": 0.09973, "loss_rpn_bbox": 0.15041, "loss_cls": 0.53415, "acc": 83.85938, "loss_bbox": 0.46925, "loss": 1.25353, "time": 0.38177}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.02, "memory": 7460, "data_time": 0.00559, "loss_rpn_cls": 0.11486, "loss_rpn_bbox": 0.163, "loss_cls": 0.54756, "acc": 83.24805, "loss_bbox": 0.4885, "loss": 1.31391, "time": 0.38474}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.02, "memory": 7460, "data_time": 0.00594, "loss_rpn_cls": 0.09538, "loss_rpn_bbox": 0.15332, "loss_cls": 0.54589, "acc": 83.43164, "loss_bbox": 0.50643, "loss": 1.30101, "time": 0.37967}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.02, "memory": 7460, "data_time": 0.00557, "loss_rpn_cls": 0.10255, "loss_rpn_bbox": 0.16237, "loss_cls": 0.5185, "acc": 84.26562, "loss_bbox": 0.46414, "loss": 1.24757, "time": 0.38743}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.02, "memory": 7460, "data_time": 0.00501, "loss_rpn_cls": 0.12308, "loss_rpn_bbox": 0.15246, "loss_cls": 0.55399, "acc": 83.42578, "loss_bbox": 0.46649, "loss": 1.29602, "time": 0.36998}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.02, "memory": 7460, "data_time": 0.00544, "loss_rpn_cls": 0.11947, "loss_rpn_bbox": 0.15737, "loss_cls": 0.5199, "acc": 84.79102, "loss_bbox": 0.45988, "loss": 1.25662, "time": 0.38394}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.02, "memory": 7460, "data_time": 0.00506, "loss_rpn_cls": 0.11152, "loss_rpn_bbox": 0.15349, "loss_cls": 0.51134, "acc": 84.48438, "loss_bbox": 0.46559, "loss": 1.24194, "time": 0.38544}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.02, "memory": 7460, "data_time": 0.00512, "loss_rpn_cls": 0.10831, "loss_rpn_bbox": 0.15625, "loss_cls": 0.53394, "acc": 83.72656, "loss_bbox": 0.47306, "loss": 1.27155, "time": 0.38745}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.02, "memory": 7460, "data_time": 0.00522, "loss_rpn_cls": 0.12029, "loss_rpn_bbox": 0.15468, "loss_cls": 0.51791, "acc": 84.30273, "loss_bbox": 0.45834, "loss": 1.25121, "time": 0.37906}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.02, "memory": 7460, "data_time": 0.00571, "loss_rpn_cls": 0.11034, "loss_rpn_bbox": 0.16298, "loss_cls": 0.5131, "acc": 84.38281, "loss_bbox": 0.46238, "loss": 1.2488, "time": 0.37996}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.02, "memory": 7460, "data_time": 0.00521, "loss_rpn_cls": 0.12708, "loss_rpn_bbox": 0.18605, "loss_cls": 0.52981, "acc": 83.73438, "loss_bbox": 0.49039, "loss": 1.33333, "time": 0.38148}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.02, "memory": 7460, "data_time": 0.00525, "loss_rpn_cls": 0.10047, "loss_rpn_bbox": 0.14943, "loss_cls": 0.51003, "acc": 83.88086, "loss_bbox": 0.46332, "loss": 1.22325, "time": 0.37937}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.02, "memory": 7460, "data_time": 0.00515, "loss_rpn_cls": 0.12382, "loss_rpn_bbox": 0.15624, "loss_cls": 0.5141, "acc": 84.06445, "loss_bbox": 0.45699, "loss": 1.25116, "time": 0.38087}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.02, "memory": 7460, "data_time": 0.00553, "loss_rpn_cls": 0.10703, "loss_rpn_bbox": 0.1507, "loss_cls": 0.50854, "acc": 84.33984, "loss_bbox": 0.44765, "loss": 1.21393, "time": 0.38555}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.02, "memory": 7460, "data_time": 0.00548, "loss_rpn_cls": 0.09419, "loss_rpn_bbox": 0.14743, "loss_cls": 0.50493, "acc": 84.76758, "loss_bbox": 0.46607, "loss": 1.21262, "time": 0.3804}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.02, "memory": 7460, "data_time": 0.00561, "loss_rpn_cls": 0.11244, "loss_rpn_bbox": 0.15996, "loss_cls": 0.51544, "acc": 84.07617, "loss_bbox": 0.4554, "loss": 1.24324, "time": 0.37831}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.02, "memory": 7460, "data_time": 0.00541, "loss_rpn_cls": 0.11188, "loss_rpn_bbox": 0.17185, "loss_cls": 0.54251, "acc": 83.13867, "loss_bbox": 0.48787, "loss": 1.31411, "time": 0.38293}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.02, "memory": 7460, "data_time": 0.0056, "loss_rpn_cls": 0.11407, "loss_rpn_bbox": 0.16428, "loss_cls": 0.53135, "acc": 83.68555, "loss_bbox": 0.45165, "loss": 1.26135, "time": 0.3813}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.02, "memory": 7460, "data_time": 0.00556, "loss_rpn_cls": 0.10709, "loss_rpn_bbox": 0.15343, "loss_cls": 0.4949, "acc": 85.03906, "loss_bbox": 0.44263, "loss": 1.19805, "time": 0.38536}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.02, "memory": 7460, "data_time": 0.0056, "loss_rpn_cls": 0.09512, "loss_rpn_bbox": 0.1572, "loss_cls": 0.52034, "acc": 84.09375, "loss_bbox": 0.47792, "loss": 1.25057, "time": 0.38757}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.02, "memory": 7460, "data_time": 0.00521, "loss_rpn_cls": 0.12033, "loss_rpn_bbox": 0.16536, "loss_cls": 0.54469, "acc": 83.58984, "loss_bbox": 0.49058, "loss": 1.32096, "time": 0.38474}
