{"env_info": "sys.platform: linux\nPython: 3.7.8 | packaged by conda-forge | (default, Jul 31 2020, 02:25:08) [GCC 7.5.0]\nCUDA available: True\nGPU 0: GeForce RTX 2080 Ti\nCUDA_HOME: /usr/local/cuda-11.0\nNVCC: Build cuda_11.0_bu.TC445_37.28845127_0\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.7.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.6.0 (Git Hash 5ef631a030a6f73131c77892041042805a06064f)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.3\n  - Magma 2.5.2\n  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.8.1\nOpenCV: 4.4.0\nMMCV: 1.2.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.0\nMMDetection: 2.6.0+f382ec8", "config": "model = dict(\n    type='FasterRCNN',\n    pretrained='torchvision://resnet50',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='FocalLoss',\n                use_sigmoid=True,\n                loss_weight=1.0,\n                gamma=2.0,\n                alpha=0.25),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n            reg_decoded_bbox=True)))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=False,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/train/coco.json',\n        img_prefix='data/visdrone/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/val/coco.json',\n        img_prefix='data/visdrone/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/visdrone/test/coco.json',\n        img_prefix='data/visdrone/test/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n                 'tricycle', 'awning-tricycle', 'bus', 'motor')))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nclasses = ('pedestrian', 'people', 'bicycle', 'car', 'van', 'truck',\n           'tricycle', 'awning-tricycle', 'bus', 'motor')\nwork_dir = './work_dirs/faster_rcnn_r50_fpn_focal_l1loss_1x_coco'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "faster_rcnn_r50_fpn_focal_l1loss_1x_coco.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 4936, "data_time": 0.04774, "loss_rpn_cls": 0.67515, "loss_rpn_bbox": 0.25287, "loss_cls": 1.78498, "acc": 77.44922, "loss_bbox": 0.90851, "loss": 3.6215, "time": 0.41321}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 4936, "data_time": 0.00506, "loss_rpn_cls": 0.57809, "loss_rpn_bbox": 0.2484, "loss_cls": 0.37338, "acc": 88.11133, "loss_bbox": 0.81412, "loss": 2.01399, "time": 0.36375}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 5186, "data_time": 0.00557, "loss_rpn_cls": 0.33103, "loss_rpn_bbox": 0.24568, "loss_cls": 0.14475, "acc": 84.75977, "loss_bbox": 1.16649, "loss": 1.88795, "time": 0.36027}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 5186, "data_time": 0.00517, "loss_rpn_cls": 0.32191, "loss_rpn_bbox": 0.22143, "loss_cls": 0.16887, "acc": 81.79297, "loss_bbox": 2.27482, "loss": 2.98702, "time": 0.37058}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 5937, "data_time": 0.00512, "loss_rpn_cls": 0.30083, "loss_rpn_bbox": 0.22885, "loss_cls": 0.20453, "acc": 81.22461, "loss_bbox": 2.68351, "loss": 3.41771, "time": 0.37819}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 5937, "data_time": 0.00567, "loss_rpn_cls": 0.35437, "loss_rpn_bbox": 0.24218, "loss_cls": 0.21961, "acc": 80.74414, "loss_bbox": 2.82031, "loss": 3.63646, "time": 0.37235}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 5937, "data_time": 0.00546, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 29.51948, "loss_bbox": NaN, "loss": NaN, "time": 0.36534}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 5937, "data_time": 0.00553, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.75715, "loss_bbox": NaN, "loss": NaN, "time": 0.365}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 5937, "data_time": 0.00528, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.7205, "loss_bbox": NaN, "loss": NaN, "time": 0.36458}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 5937, "data_time": 0.00567, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 19.48339, "loss_bbox": NaN, "loss": NaN, "time": 0.36602}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 5937, "data_time": 0.00552, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.01722, "loss_bbox": NaN, "loss": NaN, "time": 0.36686}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 5937, "data_time": 0.00567, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.89461, "loss_bbox": NaN, "loss": NaN, "time": 0.36655}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 5937, "data_time": 0.00526, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 19.54303, "loss_bbox": NaN, "loss": NaN, "time": 0.36434}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 5937, "data_time": 0.00511, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.60009, "loss_bbox": NaN, "loss": NaN, "time": 0.37177}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 5937, "data_time": 0.00507, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.45429, "loss_bbox": NaN, "loss": NaN, "time": 0.36877}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 5937, "data_time": 0.00551, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.36011, "loss_bbox": NaN, "loss": NaN, "time": 0.3727}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 5937, "data_time": 0.00546, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 23.07729, "loss_bbox": NaN, "loss": NaN, "time": 0.36632}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 5937, "data_time": 0.00559, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 18.69707, "loss_bbox": NaN, "loss": NaN, "time": 0.36546}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 5937, "data_time": 0.00536, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.86923, "loss_bbox": NaN, "loss": NaN, "time": 0.37156}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.02, "memory": 5937, "data_time": 0.00559, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 20.55829, "loss_bbox": NaN, "loss": NaN, "time": 0.37184}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.02, "memory": 5937, "data_time": 0.00527, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.99898, "loss_bbox": NaN, "loss": NaN, "time": 0.37032}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.02, "memory": 5937, "data_time": 0.00513, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 24.33131, "loss_bbox": NaN, "loss": NaN, "time": 0.37056}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.02, "memory": 5937, "data_time": 0.0051, "loss_rpn_cls": NaN, "loss_rpn_bbox": NaN, "loss_cls": NaN, "acc": 21.87426, "loss_bbox": NaN, "loss": NaN, "time": 0.37552}
